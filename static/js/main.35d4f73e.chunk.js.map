{"version":3,"sources":["../../../solitaire/src/models/Card.js","../../../solitaire/src/models/deckGenerator.js","../../../solitaire/src/models/Tableu.js","../../../solitaire/src/models/Foundations.js","../../../solitaire/src/models/Deck.js","../../../solitaire/src/CardView.js","../../../solitaire/src/TableuView.js","../../../solitaire/src/FoundationLayer.js","../../../solitaire/src/GameView.js","../../../solitaire/src/index.js"],"names":["Card","suite","color","cardNum","unicode","id","Object","classCallCheck","this","isOpen","card","deckGenerator","deck","cardSuites","suit","suitNum","hexString","toString","push","Tableu","pilesCards","piles","createInitialPiles","pileNum","splice","cardId","flattenDeep","find","removedCards","concat","draggedCard","targetPileNum","lastCardOnPile","last","canPlayOnTopOf","pile","length","setIsOpen","requiredPile","cardIndex","findIndex","Foundations","wastePile","foundations","openPile","getCardFromOpenPile","getCardFromFoundation","draggedCardId","forEach","remove","slice","pop","lastCardOfPile","canPlayBelow","Deck","shuffle","tableu","openWastePileCard","getPiles","getWastePile","getOpenPile","getFoundations","startsWith","isCardPlayable","getCard","setInitialOpenCards","removeCard","cards","addCards","CardView","props","possibleConstructorReturn","getPrototypeOf","call","ev","dataTransfer","setData","target","react_default","a","createElement","dangerouslySetInnerHTML","__html","className","draggable","onDragStart","drag","bind","key","style","getOpenCardView","getClosedCardView","React","Component","TableuView","preventDefault","cardsView","onDrop","drop","onDragOver","allowDrop","_this","map","src_CardView","getPileView","FoundationView","lastCard","FoundationsView","FoundationLayer_FoundationView","FoundationLayer","onClick","openTopCard","openCard","FoundationLayer_FoundationsView","GameView","state","_this2","setState","getData","updatePiles","src_FoundationLayer","src_TableuView","ReactDOM","render","src_GameView","document","getElementById"],"mappings":"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","file":"static/js/main.35d4f73e.chunk.js","sourcesContent":["class Card {\n  constructor(suite, color, cardNum, unicode, id) {\n    this.suite = suite;\n    this.color = color;\n    this.cardNum = cardNum;\n    this.unicode = unicode;\n    this.id = id;\n    this.isOpen = false;\n  }\n\n  canPlayOnTopOf(card) {\n    if (card) {\n      return card.color != this.color && this.cardNum + 1 == card.cardNum;\n    }\n    return this.cardNum == 13;\n  }\n\n  canPlayBelow(card) {\n    if (card) {\n      return card.color == this.color && this.cardNum - 1 == card.cardNum;\n    }\n    return this.cardNum == 1;\n  }\n\n  setIsOpen() {\n    this.isOpen = true;\n  }\n}\n\nexport default Card;\n","import Card from \"./Card\";\n\nconst deckGenerator = function() {\n  let deck = [];\n  let cardSuites = [\n    { suit: \"Spades\", color: \"Black\", unicode: \"&#x1F0A\" },\n    { suit: \"Hearts\", color: \"Red\", unicode: \"&#x1F0B\" },\n    { suit: \"Diamond\", color: \"Red\", unicode: \"&#x1F0C\" },\n    { suit: \"Club\", color: \"Black\", unicode: \"&#x1F0D\" }\n  ];\n  for (let suitNum = 0; suitNum < 4; suitNum++) {\n    for (let cardNum = 1; cardNum < 14; cardNum++) {\n      let suite = cardSuites[suitNum];\n      let hexString = cardNum.toString(16);\n      if (cardNum >= 12) {\n        hexString = (cardNum + 1).toString(16);\n      }\n      deck.push(\n        new Card(\n          suite.suit,\n          suite.color,\n          cardNum,\n          suite.unicode + hexString,\n          suitNum + \"_\" + cardNum\n        )\n      );\n    }\n  }\n  return deck;\n};\n\nexport default deckGenerator;\n","import { flattenDeep, last } from \"lodash\";\n\nclass Tableu {\n  constructor(pilesCards) {\n    this.pilesCards = pilesCards;\n    this.piles = this.createInitialPiles();\n  }\n\n  createInitialPiles() {\n    let piles = [];\n    for (let pileNum = 0; pileNum < 7; pileNum++) {\n      piles.push(this.pilesCards.splice(0, pileNum + 1));\n    }\n    return piles;\n  }\n\n  getCard(cardId) {\n    let flatStack = flattenDeep(this.piles);\n    return flatStack.find(card => card.id == cardId);\n  }\n\n  addCards(pileNum, removedCards) {\n    this.piles[pileNum] = this.piles[pileNum].concat(removedCards);\n  }\n\n  getPiles() {\n    return this.piles;\n  }\n\n  isCardPlayable(draggedCard, targetPileNum) {\n    let lastCardOnPile = last(this.piles[targetPileNum]);\n    return draggedCard.canPlayOnTopOf(lastCardOnPile);\n  }\n\n  setInitialOpenCards() {\n    for (let pileNum = 0; pileNum < 7; pileNum++) {\n      let pile = this.piles[pileNum];\n      let lastCardOnPile = pile[pile.length - 1];\n      if (lastCardOnPile) {\n        lastCardOnPile.setIsOpen();\n      }\n    }\n  }\n\n  removeCard(cardId) {\n    let requiredPile = this.piles.find(pile =>\n      pile.find(card => card.id == cardId)\n    );\n    if (requiredPile) {\n      let cardIndex = requiredPile.findIndex(card => card.id == cardId);\n      return requiredPile.splice(cardIndex);\n    }\n    return [];\n  }\n}\n\nexport default Tableu;\n","import { last, remove } from \"lodash\";\n\nclass Foundations {\n  constructor(wastePile) {\n    this.foundations = [[], [], [], []];\n    this.wastePile = wastePile;\n    this.openPile = [];\n  }\n\n  getFoundations() {\n    return this.foundations;\n  }\n\n  getWastePile() {\n    return this.wastePile;\n  }\n\n  getOpenPile() {\n    return this.openPile;\n  }\n\n  getCardFromOpenPile(id) {\n    return this.openPile.find(card => card.id == id);\n  }\n\n  getCardFromFoundation(id) {\n    let requiredPile = this.foundations.find(pile =>\n      pile.find(card => card.id == id)\n    );\n    return last(requiredPile);\n  }\n\n  getCard(id) {\n    let card = this.getCardFromOpenPile(id);\n    if (!card) {\n      card = this.getCardFromFoundation(id);\n    }\n    return card;\n  }\n\n  addCards(pileNum, removedCards) {\n    this.foundations[pileNum] = this.foundations[pileNum].concat(removedCards);\n  }\n\n  removeCard(draggedCardId) {\n    let removedCards = this.getCardFromOpenPile(draggedCardId);\n    if (!removedCards) {\n      removedCards = this.getCardFromFoundation(draggedCardId);\n      this.foundations.forEach(pile =>\n        remove(pile, card => card.id == draggedCardId)\n      );\n    }\n    remove(this.openPile, card => card.id == draggedCardId);\n    return removedCards;\n  }\n\n  openWastePileCard() {\n    if (this.wastePile.length == 0) {\n      this.wastePile = this.openPile.slice();\n      this.openPile = [];\n      return;\n    }\n    let card = last(this.wastePile);\n    card.setIsOpen();\n    this.openPile.push(card);\n    this.wastePile.pop();\n  }\n\n  isCardPlayable(draggedCard, targetPileNum) {\n    let lastCardOfPile = last(this.foundations[targetPileNum]);\n    return draggedCard.canPlayBelow(lastCardOfPile);\n  }\n}\n\nexport default Foundations;\n","import deckGenerator from \"./deckGenerator\";\nimport { shuffle, last, remove } from \"lodash\";\nimport Tableu from \"./Tableu\";\nimport Foundations from \"./Foundations\";\n\nclass Deck {\n  constructor() {\n    this.deck = shuffle(deckGenerator());\n    this.tableu = new Tableu(this.deck.slice(0, 28));\n    this.foundations = new Foundations(this.deck.slice(28));\n  }\n\n  openWastePileCard() {\n    this.foundations.openWastePileCard();\n  }\n\n  getPiles() {\n    return this.tableu.getPiles();\n  }\n\n  getWastePile() {\n    return this.foundations.getWastePile();\n  }\n\n  getOpenPile() {\n    return this.foundations.getOpenPile();\n  }\n\n  getFoundations() {\n    return this.foundations.getFoundations();\n  }\n\n  isCardPlayable(draggedCard, targetPileNum) {\n    if (targetPileNum.toString().startsWith(\"_\")) {\n      return this.foundations.isCardPlayable(\n        draggedCard,\n        targetPileNum.slice(1)\n      );\n    }\n    return this.tableu.isCardPlayable(draggedCard, targetPileNum);\n  }\n\n  getCard(id) {\n    let card = this.tableu.getCard(id);\n    if (!card) {\n      card = this.foundations.getCard(id);\n    }\n    return card;\n  }\n\n  setInitialOpenCards() {\n    this.tableu.setInitialOpenCards();\n  }\n\n  removeCard(draggedCardId) {\n    let removedCards = this.tableu.removeCard(draggedCardId);\n    if (removedCards.length == 0) {\n      removedCards = this.foundations.removeCard(draggedCardId);\n    }\n    return removedCards;\n  }\n\n  addCards(targetPileNum, cards) {\n    if (targetPileNum.toString().startsWith(\"_\")) {\n      this.foundations.addCards(targetPileNum.slice(1), cards);\n      return;\n    }\n    this.tableu.addCards(targetPileNum, cards);\n  }\n}\n\nexport default Deck;\n","import React from \"react\";\nimport \"./game.css\";\n\nclass CardView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  drag(ev) {\n    ev.dataTransfer.setData(\"id\", ev.target.id);\n  }\n\n  getOpenCardView(card) {\n    return (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: `${card.unicode}`\n        }}\n        className=\"card\"\n        draggable=\"true\"\n        onDragStart={this.drag.bind(this)}\n        id={card.id}\n        key={card.id}\n        style={{\n          color: `${card.color}`\n        }}\n      />\n    );\n  }\n\n  getClosedCardView() {\n    return (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: \"&#x1F0A0\"\n        }}\n        className=\"card\"\n      />\n    );\n  }\n\n  render() {\n    if (this.props.card && this.props.card.isOpen) {\n      return this.getOpenCardView(this.props.card);\n    }\n    return this.getClosedCardView();\n  }\n}\n\nexport default CardView;\n","import React from \"react\";\nimport CardView from \"./CardView\";\nimport \"./game.css\";\n\nclass TableuView extends React.Component {\n  allowDrop(ev) {\n    ev.preventDefault();\n  }\n\n  getPileView(cardsView, pileNum) {\n    return (\n      <div\n        key={pileNum}\n        id={pileNum}\n        onDrop={this.props.drop.bind(null, pileNum)}\n        onDragOver={this.allowDrop.bind(this)}\n        className=\"pile\"\n      >\n        {cardsView}\n      </div>\n    );\n  }\n\n  render() {\n    this.props.setInitialOpenCards();\n    return this.props.piles.map((pile, pileNum) => {\n      let cardsView = pile.map(card => {\n        return <CardView card={card} />;\n      });\n      return this.getPileView(cardsView, pileNum);\n    });\n  }\n}\n\nexport default TableuView;\n","import React from \"react\";\nimport { last } from \"lodash\";\n\nimport \"./game.css\";\nimport CardView from \"./CardView\";\n\nclass FoundationView extends React.Component {\n  allowDrop(ev) {\n    ev.preventDefault();\n  }\n\n  render() {\n    return (\n      <div\n        onDrop={this.props.drop.bind(null, \"_\" + this.props.pileNum)}\n        onDragOver={this.allowDrop.bind(this)}\n        id={\"_\" + this.props.pileNum}\n      >\n        <CardView card={this.props.lastCard} />\n      </div>\n    );\n  }\n}\n\nclass FoundationsView extends React.Component {\n  render() {\n    let foundations = this.props.foundations.map((pile, pileNum) => (\n      <FoundationView\n        pileNum={pileNum}\n        lastCard={last(pile)}\n        drop={this.props.drop}\n      />\n    ));\n    return <div className=\"foundationPiles\"> {foundations}</div>;\n  }\n}\n\nclass FoundationLayer extends React.Component {\n  render() {\n    return (\n      <div className=\"foundation\">\n        <div className=\"wasteCardPiles\">\n          <div className=\"card\" onClick={this.props.openTopCard} />\n          <CardView card={this.props.openCard} />\n        </div>\n        <FoundationsView\n          foundations={this.props.foundations}\n          drop={this.props.drop}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FoundationLayer;\n","import React from \"react\";\nimport { last } from \"lodash\";\n\nimport \"./game.css\";\n\nimport Deck from \"./models/Deck\";\nimport TableuView from \"./TableuView\";\nimport FoundationLayer from \"./FoundationLayer\";\n\nclass GameView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deck = new Deck();\n    this.state = {\n      piles: this.deck.getPiles(),\n      wastePile: this.deck.getWastePile(),\n      openPile: this.deck.getOpenPile(),\n      foundations: this.deck.getFoundations()\n    };\n  }\n\n  openTopCard() {\n    this.deck.openWastePileCard();\n    this.setState(state => {\n      state.wastePile = this.deck.getWastePile();\n      state.openPile = this.deck.getOpenPile();\n      return state;\n    });\n  }\n\n  updatePiles(draggedCardId, targetPileNum) {\n    let removedCards = this.deck.removeCard(draggedCardId);\n    this.deck.addCards(targetPileNum, removedCards);\n    this.setState(state => {\n      state.piles = state.piles;\n      return state;\n    });\n  }\n\n  isCardPlayable(draggedCardId, targetPileNum) {\n    let draggedCard = this.deck.getCard(draggedCardId);\n    return this.deck.isCardPlayable(draggedCard, targetPileNum);\n  }\n\n  drop(targetPileNum, ev) {\n    ev.preventDefault();\n    let draggedCardId = ev.dataTransfer.getData(\"id\");\n    if (this.isCardPlayable(draggedCardId, targetPileNum))\n      this.updatePiles(draggedCardId, targetPileNum);\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <FoundationLayer\n          deck={this.deck}\n          drop={this.drop.bind(this)}\n          openTopCard={this.openTopCard.bind(this)}\n          openCard={last(this.state.openPile)}\n          foundations={this.state.foundations}\n        />\n\n        <div className=\"piles\">\n          <TableuView\n            drop={this.drop.bind(this)}\n            piles={this.state.piles}\n            setInitialOpenCards={this.deck.setInitialOpenCards.bind(this.deck)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameView;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameView from \"./GameView\";\n\nReactDOM.render(<GameView />, document.getElementById(\"root\"));\n"],"sourceRoot":""}